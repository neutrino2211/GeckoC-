package main

ctypealias c_string char*
ctypealias c_int int

// Single line comment
declare func printf(format: c_string, args: *) 

// An interface
interface iDevice {
	uid: byte[64]
	name: string

	type: c_int
}

// An enum
enum eDeviceType {
	gamepad = 4
	keyboard
	mouse = 12
	trackpad
}

// A for loop
for (const i of integers) {
	printf("%i", i)
}

for (const i in integers) {
	printf("%i", i)
}

for (const i of [1, 2, 3, 4, 5]) {
	printf("%i", i)
}

for (const i in [1, 2, 3, 4, 5]) {
	printf("%i", i)
}

if ("H" in "Hello World!") {
	run_function()
}

// {
	Multiline comment

	This here is a class in gecko
} extra

class sizeable {
    companion getter size (self: unknown) -> number {
        return std.C.sizeof(self)
    }
}

class number extends sizeable {}

private strict class Array takes [T = number] {

    assert T.is(sizeable)

    private let size: number = 0;

    func init (self: Array) {
        self.size = T.size
    }
}

private strict class string 
{
	private let __c_char: c_string
	func init(self: string) -> void {
		// comment
	}

	operator "=" (self:string, val: c_string) -> void {
		self.__c_char = val
	}
}

class String extending string {
	func init (self: String) -> void {
		// Another comment
	}
}

func calculateThis() -> int {
	return 20*4
}

private async const apiRequest = request.get (
    "http://www.google.com",
    {
        noCors: true
    }
)

const s: string = "Hello World!!!"
const e: int = 1+2
const e2: int = 1+(2*3)
const e3: int = 30*calculateThis()
const e4: int = calculateThis()*calculateThis()

const s2 = "Hello World!! 2"

let i: int = 80

func main (argc: int, argv: [[string]]) -> void {
	const operation: string = argv[0]
	const response: request.Response = apiRequest.get();
	printf("", operation)
}
